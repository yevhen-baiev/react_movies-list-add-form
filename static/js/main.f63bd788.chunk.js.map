{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","_ref$label","label","_ref$placeholder","placeholder","concat","_ref$required","required","_ref$onChange","onChange","_ref$invalidVal","invalidVal","_useState","useState","Math","random","toFixed","slice","id","_slicedToArray","_useState3","_useState4","touched","setTouched","hasError","trim","enotherError","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","EMPTY_VAL","_useState2","count","setCount","_objectSpread","formFieldsVal","setFormFieldsVal","validateUrl","url","test","validImgUrl","validImdbUrl","handleChange","prevState","_defineProperty","onSubmit","preventDefault","prev","disabled","App","_toConsumableArray","moviesFromServer","setMovies","current","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f63bd788.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string, name: string) => void,\n  invalidVal?: boolean;\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  invalidVal = true,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value.trim();\n  const enotherError = touched && !invalidVal && !hasError;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          name={name}\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || enotherError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value, event.target.name)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n      {enotherError && (\n        <p className=\"help is-danger\">{`${label} is invalid`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const EMPTY_VAL: Movie = {\n    title: '',\n    description: '',\n    imdbUrl: '',\n    imdbId: '',\n    imgUrl: '',\n  };\n\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [formFieldsVal, setFormFieldsVal] = useState<Movie>({ ...EMPTY_VAL });\n\n  const {\n    title,\n    description,\n    imdbId,\n    imgUrl,\n    imdbUrl,\n  } = formFieldsVal;\n\n  const validateUrl = (url: string): boolean => {\n    // eslint-disable-next-line\n    const reg = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n    return reg.test(url.trim());\n  };\n\n  const validImgUrl = validateUrl(imgUrl);\n  const validImdbUrl = validateUrl(imdbUrl);\n\n  const handleChange = (value: string, name: string) => {\n    setFormFieldsVal(prevState => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  const reset = () => setFormFieldsVal({ ...EMPTY_VAL });\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    onAdd(formFieldsVal);\n    setCount(prev => prev + 1);\n    reset();\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={handleChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={handleChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={handleChange}\n        invalidVal={validImgUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={handleChange}\n        invalidVal={validImdbUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={handleChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!(title.trim() && imgUrl.trim()\n              && imdbUrl.trim()\n              && imdbId.trim())}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\n\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([...moviesFromServer]);\n\n  const onAdd = (movie: Movie) => setMovies(current => [...current, movie]);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}